// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  emal      String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now()) // user member since 2024
  updatedAt DateTime @updatedAt

  // Now Relations : One to many
  posts    Post[] // : One to many
  comments Comment[] // : One to many
  likes    Like[] // : One to many

  followers Follows[] @relation("following") // user who follows this uer
  following Follows[] @relation("follower") // user who this user follows

  notifications        Notification[] @relation("userNotifications") // notific recieved by user
  notificationsCreated Notification[] @relation("notificationCreator") // notific created by user
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade) // cascade del means del all post if auth is deleted
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id       String @id @default(cuid())
  authorId String 
  content String
  // 1:06:23 left
}
